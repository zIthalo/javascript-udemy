Const com valores mutáveis
const descreve uma variável que não pode ser reatribuída (com o operador de atribuição =). Depois de criá-la, não podemos fazer algo assim:

const nome = 'luiz';
nome = 'joão'; // Erro: Assignment to constant variable.
Porém, existe uma diferença entre variável e valor.

Variáveis são como um apelido para um valor, uma espécie de alias para mencionar algum valor salvo na memória.

Já valores são os dados que realmente ficam salvos na memória e sustentam determinado tipo. Alguns tipos de valores são imutáveis, como number, string, boolean, undefined, null, symbol e bigint (os primitivos todos são imutáveis). Outros tipos são mutáveis, como arrays e objetos (objetos em geral são mutáveis, com exceção de null).

Valores mutáveis geralmente são estruturas de dados mais complexas que sustentam outros valores ou comportamentos internamente. Como é o caso do array, que pode ser composto por vários outros tipos de dados.

Quando usamos const com tipos primitivos, esse valor nunca mais poderá ser alterado. Nesse caso, além de const não permitir reatribuição, o valor também é imutável (consequentemente, nunca podemos alterar essa constante).

Já quando usamos const com valores mutáveis (como arrays e objetos), a variável continua sendo constante, porém os valores dentro do objeto poderão ser alterados. Isso acontece porque quando alteramos um valor interno de um objeto, não ocorre a reatribuição da variável com sinal de atribuição = (a variável continua apontando para o mesmo local na memória), apenas a alteração de um valor interno do mesmo objeto.

Por este motivo, pode-se usar const com objetos mutáveis e ainda assim alterar seus valores internos. A única coisa que não vamos conseguir fazer é reatribuir o valor da variável.

Exemplos:

Isso pode

const array = [1, 2, 3, 4, 5];
array.pop();
array[0] = 1024;
console.log(array); // [ 1024, 2, 3, 4 ]
 
Isso NÃO pode

const array = [1, 2, 3, 4, 5];
array = 'Legal'; // Assignment to constant variable.

Veja agora alguns exemplos de situações em que os valores são copiados e quando os valores apontarão para um espaço na memória:

let n1 = 10
let n2 = n1

n1 = 15

console.log(n1, n2) //neste caso aqui será impresso o novo valor de n1 e o antigo valor de n1 na variável n2, quando declaramos assim os valores de uma variável são copiados para as outras e armazenados lá mesmo que você mude o valor da var.

E quando é que o valor é por referência, ou seja, quando ele aponta para um lugar na memória.

//Assim é feita a declaração

let a = [1,2,3]
let b = a 
let c = b

a.push(4) 

console.log(a, b) //saída [1,2,3,4] [1,2,3,4] //neste caso aqui o b também irá mudar pois ele e o a apontam para o mesmo espaço na memória do pc, ou seja neste caso aqui o b não copiou o valor de a mas agora tudo o que for a será b (mas tem um jeito de fazer o b copiar o valor de a que veremos mais adiante)

b.pop(); 

console.log(a, b) //saída [1,2,3] [1,2,3]

//para fazer o valor de b copiar o que tinnha em a eu terei que usar isto let b = [...a] assim é que eu copio o valor de a vejamos co,o fica o meu código agora

let a = [1,2,3,4]
let b = [...a] //Esta técnica se chama spread
let c = b

console.log(a, b, c) //saída [1,2,3,4] [1,2,3,4] [1,2,3,4]

a.push(5)

console.log(a, b, c) //saída [1,2,3,4,5] [1,2,3,4] [1,2,3,4]

b.pop()

console.log(a,b,c) //saída [1,2,3,4,5] [1,2,3] [1,2,3]

//tendeu?

E isto acima também funciona para objetos também fazendo um spread

const a ={
    nome: 'Ithalo'
    sobrenome = 'Willian'
}
const b = {...a}
a.nome = 'Íthalo'

console.log(b)//Saída nome: 'Ithalo', sobrenome: 'Willian'